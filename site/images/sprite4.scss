/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$alc-name: 'alc';
$alc-x: 486px;
$alc-y: 169px;
$alc-offset-x: -486px;
$alc-offset-y: -169px;
$alc-width: 90px;
$alc-height: 122px;
$alc-total-width: 714px;
$alc-total-height: 464px;
$alc-image: 'sprite4.png';
$alc: (486px, 169px, -486px, -169px, 90px, 122px, 714px, 464px, 'sprite4.png', 'alc', );
$archos-name: 'archos';
$archos-x: 633px;
$archos-y: 0px;
$archos-offset-x: -633px;
$archos-offset-y: 0px;
$archos-width: 81px;
$archos-height: 126px;
$archos-total-width: 714px;
$archos-total-height: 464px;
$archos-image: 'sprite4.png';
$archos: (633px, 0px, -633px, 0px, 81px, 126px, 714px, 464px, 'sprite4.png', 'archos', );
$fly-name: 'fly';
$fly-x: 0px;
$fly-y: 0px;
$fly-offset-x: 0px;
$fly-offset-y: 0px;
$fly-width: 118px;
$fly-height: 118px;
$fly-total-width: 714px;
$fly-total-height: 464px;
$fly-image: 'sprite4.png';
$fly: (0px, 0px, 0px, 0px, 118px, 118px, 714px, 464px, 'sprite4.png', 'fly', );
$hs-name: 'hs';
$hs-x: 338px;
$hs-y: 0px;
$hs-offset-x: -338px;
$hs-offset-y: 0px;
$hs-width: 98px;
$hs-height: 127px;
$hs-total-width: 714px;
$hs-total-height: 464px;
$hs-image: 'sprite4.png';
$hs: (338px, 0px, -338px, 0px, 98px, 127px, 714px, 464px, 'sprite4.png', 'hs', );
$lumia430-name: 'lumia430';
$lumia430-x: 157px;
$lumia430-y: 168px;
$lumia430-offset-x: -157px;
$lumia430-offset-y: -168px;
$lumia430-width: 99px;
$lumia430-height: 121px;
$lumia430-total-width: 714px;
$lumia430-total-height: 464px;
$lumia430-image: 'sprite4.png';
$lumia430: (157px, 168px, -157px, -168px, 99px, 121px, 714px, 464px, 'sprite4.png', 'lumia430', );
$lumia640-name: 'lumia640';
$lumia640-x: 486px;
$lumia640-y: 0px;
$lumia640-offset-x: -486px;
$lumia640-offset-y: 0px;
$lumia640-width: 97px;
$lumia640-height: 119px;
$lumia640-total-width: 714px;
$lumia640-total-height: 464px;
$lumia640-image: 'sprite4.png';
$lumia640: (486px, 0px, -486px, 0px, 97px, 119px, 714px, 464px, 'sprite4.png', 'lumia640', );
$philips-name: 'philips';
$philips-x: 0px;
$philips-y: 168px;
$philips-offset-x: 0px;
$philips-offset-y: -168px;
$philips-width: 107px;
$philips-height: 123px;
$philips-total-width: 714px;
$philips-total-height: 464px;
$philips-image: 'sprite4.png';
$philips: (0px, 168px, 0px, -168px, 107px, 123px, 714px, 464px, 'sprite4.png', 'philips', );
$samsung-name: 'samsung';
$samsung-x: 0px;
$samsung-y: 341px;
$samsung-offset-x: 0px;
$samsung-offset-y: -341px;
$samsung-width: 93px;
$samsung-height: 123px;
$samsung-total-width: 714px;
$samsung-total-height: 464px;
$samsung-image: 'sprite4.png';
$samsung: (0px, 341px, 0px, -341px, 93px, 123px, 714px, 464px, 'sprite4.png', 'samsung', );
$sens-name: 'sens';
$sens-x: 168px;
$sens-y: 0px;
$sens-offset-x: -168px;
$sens-offset-y: 0px;
$sens-width: 120px;
$sens-height: 116px;
$sens-total-width: 714px;
$sens-total-height: 464px;
$sens-image: 'sprite4.png';
$sens: (168px, 0px, -168px, 0px, 120px, 116px, 714px, 464px, 'sprite4.png', 'sens', );
$spritesheet-width: 714px;
$spritesheet-height: 464px;
$spritesheet-image: 'sprite4.png';
$spritesheet-sprites: ($alc, $archos, $fly, $hs, $lumia430, $lumia640, $philips, $samsung, $sens, );
$spritesheet: (714px, 464px, 'sprite4.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
